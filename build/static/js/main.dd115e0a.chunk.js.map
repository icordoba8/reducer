{"version":3,"sources":["components/Reducer.tsx","components/ValidateForm.tsx","components/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","arg","field","value","formValid","required","initialState","username","password","firstname","lastname","name","cellphone","Form","useReducer","dispatch","change","e","target","useForm","handleSubmit","register","errors","reset","guardar","a","console","log","className","htmlFor","type","onChange","ref","message","autoComplete","disabled","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.dd115e0a.chunk.js","sourcesContent":["const reducer = (state: any, arg: any) => {\r\n  return {\r\n    ...state,\r\n    [arg.field]: arg.value,\r\n  };\r\n};\r\n\r\nexport { reducer };\r\n","const formValid = {\r\n  username: {\r\n    required: \"Campo requerido\",\r\n  },\r\n  password: {\r\n    required: \"Campo requerido\",\r\n  },\r\n  firstname: {\r\n    required: \"Campo requerido\",\r\n  },\r\n  lastname: {\r\n    required: \"Campo requerido\",\r\n  },\r\n  name: {\r\n    required: \"Campo requerido\",\r\n  },\r\n  cellphone: {\r\n    required: \"Campo requerido\",\r\n  },\r\n};\r\n\r\nexport { formValid };\r\n","import React, { useReducer } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { reducer } from \"./Reducer\";\r\nimport { formValid } from \"./ValidateForm\";\r\n\r\nconst initialState = {\r\n  username: \"\",\r\n  password: \"\",\r\n  firstname: \"\",\r\n  lastname: \"\",\r\n  name: \"\",\r\n  cellphone: \"\",\r\n};\r\n\r\nconst Form = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const change = (e: any) => {\r\n    if (e.target.name === \"firstname\" || e.target.name === \"lastname\") {\r\n      dispatch({\r\n        field: \"name\",\r\n        value:\r\n          e.target.name === \"firstname\"\r\n            ? `${e.target.value} ${state.lastname}`\r\n            : `${state.firstname} ${e.target.value}`,\r\n      });\r\n    }\r\n    // if (e.target.name === \"lastname\") {\r\n    //   dispatch({\r\n    //     field: \"name\",\r\n    //     value: state.firstname + \" \" + e.target.value,\r\n    //   });\r\n    // }\r\n\r\n    if (e.target.name !== \"firstname\" || e.target.name !== \"lastname\") {\r\n      dispatch({\r\n        field: e.target.name,\r\n        value: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const { handleSubmit, register, reset, errors } = useForm();\r\n  const guardar = async (e: any) => {\r\n    // reset(initialState); //\r\n    console.log(state);\r\n  };\r\n  return (\r\n    <div>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Nombre usuario</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            className=\"form-control\"\r\n            onChange={change}\r\n            ref={register(formValid.username)}\r\n          />\r\n          {errors.username && errors.username.message}\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Contraseña</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            className=\"form-control\"\r\n            onChange={change}\r\n            ref={register(formValid.password)}\r\n          />\r\n          {errors.password && errors.password.message}\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstname\">Primer Nombre</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"firstname\"\r\n            className=\"form-control\"\r\n            onChange={change}\r\n            ref={register(formValid.firstname)}\r\n            autoComplete=\"off\"\r\n          />\r\n          {errors.firstname && errors.firstname.message}\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastname\">Primer Apellido</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"lastname\"\r\n            className=\"form-control\"\r\n            onChange={change}\r\n            ref={register(formValid.lastname)}\r\n            autoComplete=\"off\"\r\n          />\r\n          {errors.lastname && errors.lastname.message}\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"name\">Nombre Completo</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            className=\"form-control\"\r\n            onChange={change}\r\n            disabled={true}\r\n            value={state.name}\r\n            ref={register(formValid.name)}\r\n          />\r\n          {errors.name && errors.lastname.message}\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"celphone\">Teléfono/Celular</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"cellphone\"\r\n            className=\"form-control\"\r\n            onChange={change}\r\n            ref={register(formValid.cellphone)}\r\n          />\r\n          {errors.cellphone && errors.cellphone.message}\r\n        </div>\r\n      </form>\r\n      <button\r\n        onClick={handleSubmit(guardar)}\r\n        type=\"submit\"\r\n        className=\"btn btn-primary\"\r\n      >\r\n        Guardar\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}